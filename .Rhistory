# train mse
minsplit = c(10:500)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
x11()
plot(mse~minsplit,type='l',main="minsplit에 따른 Train MSE 변화")
# train mse
minsplit = c(100)
mse = NULL
tree = rpart(train$평균매매가~.,data=train,method = 'anova',control = rpart.control(minsplit = 100,cp=0))
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 초기 모형(평균전세가 포함)")
text(tree, use.n=T)
# train mse
minsplit = c(100)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
mse
# validaiton mse
minsplit = c(100)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse[i] = mean(e^2)
}
mse
# train mse
minsplit = c(10:500)
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
# validaiton mse
minsplit = c(10:500)
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse1[i] = mean(e^2)
}
x11()
plot(mse~minsplit,type='l',main="minsplit에 따른 Train MSE 변화")
lines(mse1,col=2)
x11()
plot(mse~minsplit,type='l',main="minsplit에 따른 Train MSE 변화")
lines(mse1~minsplit,col=2)
x11()
plot(x=minsplit,y=mse,type='l',main="minsplit에 따른 Train MSE 변화")
lines(x=minsplit,y=mse1,col=2)
# train mse
minsplit = c(10:400)
mse = NULL
# train mse
minsplit = c(10:500)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
x11()
plot(x=minsplit,y=mse,type='l',main="minsplit에 따른 Train MSE 변화")
lines(x=minsplit,y=mse1,col=2)
# train mse
minsplit = c(10:150)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
# validaiton mse
minsplit = c(10:150)
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse1[i] = mean(e^2)
}
x11()
plot(x=minsplit,y=mse,type='l',main="minsplit에 따른 Train MSE 변화")
lines(x=minsplit,y=mse1,col=2)
# train mse
minsplit = c(120:130)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
# validaiton mse
minsplit = c(120:130)
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse1[i] = mean(e^2)
}
x11()
plot(x=minsplit,y=mse,type='l',main="minsplit에 따른 Train MSE 변화")
lines(x=minsplit,y=mse1,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
x11()
plot(x=minsplit,y=mse,type='l',main="minsplit에 따른 Train MSE와 validation 변화 비교")
lines(x=minsplit,y=mse1,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
# train mse
minsplit = c(10:500)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse1[i] = mean(e^2)
}
x11()
plot(x=minsplit,y=mse,type='l',main="minsplit에 따른 Train MSE와 validation 변화 비교")
lines(x=minsplit,y=mse1,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
x11()
plot(x=minsplit,y=mse,type='l',main="minsplit에 따른 Train MSE와 validation MSE 변화 비교")
lines(x=minsplit,y=mse1,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
# Pruning
tree = rpart(train$평균매매가~.,data=train,method = 'anova',control = rpart.control(minsplit = 125,cp=0))
x11()
plotcp(tree)
printcp(tree)
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 모형(평균전세가 포함)")
text(tree, use.n=T)
# Pruning
tree = rpart(train$평균매매가~.,data=train,method = 'anova',control = rpart.control(xval=10,minsplit = 125,cp=0))
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 모형(평균전세가 포함)")
text(tree, use.n=T)
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 모형(평균전세가 포함)")
text(tree, use.n=T)
printcp(tree)
x11()
plot(train$평균매매가~train$평균전세가)
cor(train$평균매매가,train$평균전세가)
# test set 적용 mse 값 확인
minsplit = c(125)
mse2 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree3 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict3.test = predict(tree3,newdata = test)
y = test$평균매매가
y_hat = predict3.test
e = y - y_hat
mse2[i] = mean(e^2)
}
mse2
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.train = predict(tree2,newdata = train)
y = train$평균매매가
y_hat = predict2.train
e = y - y_hat
mse[i] = mean(e^2)
}
mse
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse1[i] = mean(e^2)
}
mse1
rm(list=ls())
#### 결정트리 학습법2 평균전세가 제외
# rpart package 사용
# tree package 이용
library(tree)
library(caret)
library(rpart)
library(party)
graphics.off()
## load train.csv file
setwd("C:/Users/wndy4/Desktop/Project_DEMA")
train = read.csv('train set.csv',header = T, stringsAsFactors = F)
# 불필요한 항목 제거
train = train[,-c(1,2,3)]
valid = read.csv('validation set.csv',header = T,stringsAsFactors = F)
valid = valid[,-c(1,2,3)]
test = read.csv('test set.csv',header=T,stringsAsFactors = F)
test = test[,-c(1,2,3)]
# 평균전세가 항목 제거
train = train[,-7]
valid = valid[,-7]
test = test[,-7]
View(valid)
## 초기 모형
tree = rpart(train$평균매매가~.,data=train,method = 'anova')
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 초기 모형(평균전세가 미포함)")
text(tree, use.n=T)
rm(list=ls())
library(rpart)
## load train.csv file
setwd("C:/Users/wndy4/Desktop/Project_DEMA")
train = read.csv('train set.csv',header = T, stringsAsFactors = F)
View(train)
# 불필요한 항목 제거
# 평균전세가 항목 제거
train = train[,-c(1,2,3,10)]
## validation
# 검증 작업
valid = read.csv('validation set.csv',header = T,stringsAsFactors = F)
valid = valid[,-c(1,2,3,10)]
## test set
test = read.csv('test set.csv',header=T,stringsAsFactors = F)
test = test[,-c(1,2,3,10)]
## 초기 모형
tree = rpart(train$평균매매가~.,data=train,method = 'anova')
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 초기 모형(평균전세가 미포함)")
text(tree, use.n=T)
# train mse
minsplit = c(10:500)
mse = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict1.train = predict(tree1,newdata = train)
y = train$평균매매가
y_hat = predict1.train
e = y - y_hat
mse1[i] = mean(e^2)
}
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict1.train = predict(tree1,newdata = train)
y = train$평균매매가
y_hat = predict1.train
e = y - y_hat
mse1[i] = mean(e^2)
}
mse2 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse2[i] = mean(e^2)
}
x11()
plot(x=minsplit,y=mse1,type='l',main="minsplit에 따른 Train MSE와 validation MSE 변화 비교")
lines(x=minsplit,y=mse2,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = rpart.control(cp=0))
x11()
plotcp(tree1)
x11()
plot(x=minsplit,y=mse1,type='l',main="minsplit에 따른 Train MSE와 validation MSE 변화 비교")
lines(x=minsplit,y=mse2,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
x11()
plot(x=minsplit,y=mse1,type='l',main="minsplit에 따른 Train MSE와 validation MSE 변화 비교")
lines(x=minsplit,y=mse2,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
# train mse
minsplit = c(120:160)
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict1.train = predict(tree1,newdata = train)
y = train$평균매매가
y_hat = predict1.train
e = y - y_hat
mse1[i] = mean(e^2)
}
mse2 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse2[i] = mean(e^2)
}
x11()
plot(x=minsplit,y=mse1,type='l',main="minsplit에 따른 Train MSE와 validation MSE 변화 비교")
lines(x=minsplit,y=mse2,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
# train mse
minsplit = c(140:150)
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict1.train = predict(tree1,newdata = train)
y = train$평균매매가
y_hat = predict1.train
e = y - y_hat
mse1[i] = mean(e^2)
}
mse2 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse2[i] = mean(e^2)
}
x11()
plot(x=minsplit,y=mse1,type='l',main="minsplit에 따른 Train MSE와 validation MSE 변화 비교")
lines(x=minsplit,y=mse2,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))
# Pruning
tree = rpart(train$평균매매가~.,data=train,method = 'anova',control = rpart.control(xval=10,minsplit = 146,cp=0))
printcp(tree)
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 모형(평균전세가 미포함)")
text(tree, use.n=T)
x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 최종모형(평균전세가 미포함)")
text(tree, use.n=T)
# train mse
minsplit = c(146)
mse1 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict1.train = predict(tree1,newdata = train)
y = train$평균매매가
y_hat = predict1.train
e = y - y_hat
mse1[i] = mean(e^2)
}
mse1
# validaiton mse
minsplit = c(146)
mse2 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict2.valid = predict(tree2,newdata = valid)
y = valid$평균매매가
y_hat = predict2.valid
e = y - y_hat
mse2[i] = mean(e^2)
}
mse2
# test set 적용 mse 값 확인
minsplit = c(146)
mse3 = NULL
for(i in 1:length(minsplit)){
control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
tree3 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
#printcp(tree2)
#x11()
#plotcp(tree2)
predict3.test = predict(tree3,newdata = test)
y = test$평균매매가
y_hat = predict3.test
e = y - y_hat
mse3[i] = mean(e^2)
}
mse3

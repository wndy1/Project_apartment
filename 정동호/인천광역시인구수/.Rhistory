# x의 개수
# (x1,x2,x3,x4,x5) = (1,1,0,0,1)
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
rm(list=ls())
### 3장 4번
# x의 개수
# (x1,x2,x3,x4,x5) = (1,1,0,0,1)
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prior_theta)
# posterior dist
pos_dist = (lh_dist*prior_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
windows()
plot(x = theta, y = pos_dist)
plot(x = theta_1, y = pos_dist)
windows()
plot(x = theta_1,type='h', y = pos_dist)
### 3장 5번
# (1)
lh_dist[5]
# 0.03125
# (2)
marg_dist
### 5장 2번
## (1)
a = 2; b = 8; n = 10; x = 2
theta = seq(0,1,length=100)
prior.theta = dbeta(theta,a,b)
post.theta = dbeta(theta,a+x,n-x+b) # conjugate prior에 따른 사후분포 또한 베타분포를 따른다
windows()
plot(x = theta,y=post.theta,col=2,type='l')
lines(x = theta,y= prior.theta)
legend("topright",legend=c(paste("beta(",a+x,",",n-x+b,") posterior"),
paste("beta(",a,",",b,") prior")),lty=c(1,1), col=c(2,"black"))
## (3)
# theta의 사후 표본을 이용하는 HPD구간 함수
HPDsample = function(theta,level = 0.95){
N=length(theta) #표본의 수
theta.sort = sort(theta) # 오름차순 정렬
M = ceiling(N*level) # 신뢰구간을 따르는 표본의 수
nCI = N-M # 가능한 신뢰구간의 수
CI.width = rep(0,nCI) # 가능한 신뢰구간의 수만큼 벡터 생성
for(i in 1:nCI)CI.width[i] = theta.sort[i+M]-theta.sort[i] # 신뢰구간의 길이 계산
index = which.min(CI.width) # 구간 중 가장 짧은 길이의 인덱스 값
HPD = c(theta.sort[index],theta.sort[index+M]) # 해당 길이의 theta값
return(HPD)
}
# theta의 사후 표본 생성
set.seed(1234) # 씨드 설정
pos_theta = rbeta(100,a+x,n-x+b)
# 95%수준의 최대사후구간
HPDsample(theta = pos_theta,level = 0.95)
pri_theta = rbeta(1000,a,b)
# theta의 사후표본
pos_theta2 = rbeta(1000,a+x,n-x+b)
# 사전표본 오즈비
pri_eta = log(pri_theta/(1-pri_theta))
# 사후표본 오즈비
pos_eta = log(pos_theta2/(1-pos_theta2))
# 최대사후구간
HPD = HPDsample(theta = pos_eta,level = 0.95)
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="eta",ylab = "density",
main = "사전표본 오즈비와 사후표본 오즈비 비교")
lines(density(pri_eta),lwd=1, lty=1)
abline(v = HPD,lwd = 2, lty =3 ,col=2)
legend("topright",legend=c("사후밀도함수","사전밀도함수","최대사후구간"),lty = c(2,1,3),
col = c("black","black","red"))
### 5장 4번
n = 12; x = 3
# 12번의 독립적인 베루느이 시행 중 세번의 성공이 관측이라 가정
# 사전분포를 1 즉 beta(1,1)로 둔다.
a = 1; b = 1
# posterior dist
theta = seq(0,1,length=50)
post.dist = dbeta(theta,a+x,n-x+b)
# X_13 = 1 의 예측 확률은 결국 (a+x)/(a+b+n)이므로 사후분포의 평균 값이다.
X_13.prob = (a+x)/(a+b+n)
X_13.prob
### 5장 6번
# 그룹 1
n1 = 20; x1 = 10
# 그룹 2
n2 = 20; x2 = 14
# 사전분포는 beta(1,1)
a = 1; b = 1
# 그룹1의 사후분포는 beta(1+10,20-10+10) -> beta(11,20)이고
# 그룹2의 사후분포는 beta(1+14,20-14+1) -> beta(15,7) 이다.
# 각그룹별 사후표본 생성
theta_1 = rbeta(1000,11,20)
theta_2 = rbeta(1000,15,7)
# 로그오즈비
xi = log((theta_1/(1-theta_1)) / (theta_2/(1-theta_2)))
# 몬테칼로 방법(결국 사후표본으로 추정) 로그오즈비 추정치와 표준오차 게산
mean(xi); sd(xi)
# 로그오즈비 사후밀도함수와 95% HPD 표시
HPD = HPDsample(theta = xi,level = 0.95)
windows()
plot(density(xi),type = 'l',lwd = 3,ylab = 'density',xlab = '로즈오즈비',
main = '로그오즈비 사후밀도함수와 HPD')
abline(v = HPD,lwd=2,lty=2,col=2)
legend("topright",legend=c("사후밀도함수","95% 최대사후구간"),lwd=c(3,2),lty = c(1,2),col = c("black",2))
rm(list=ls())
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천초중고")
ele  = read.csv('./인천광역시초등학교현황.csv',header=T,stringsAsFactors=F)
mid  = read.csv('./인천광역시중학교현황.csv',header=T,stringsAsFactors=F)
hig  = read.csv('./인천광역시고등학교현황.csv',header=T,stringsAsFactors=F)
# 구별 동 벡터 생성 함수
dong_list=function(gu_name){
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수")
Gu = read.csv(file = paste("./인천광역시",gu_name,"인구수(new).csv",sep=''),header=T,stringsAsFactors=F)
Row = nrow(Gu)
Res = Gu[1:Row-1,"행정구역"]
Res = gsub('동','',Res)
return(Res)
}
a = dong_list(gu_name = '계양')
a = dong_list(gu_name = '계양')
a = dong_list(gu_name = '계양구')
a
View(ele)
ele[ele$구군별=='강화군',]
ele[ele$구군별=='강화군',3]
ele$구군별
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele$주소))
dong_mat1[i,4] = length(grep(dong1[i],mid$주소))
dong_mat1[i,5] = length(grep(dong1[i],hig$주소))
}
ele$구군별
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele$주소))
dong_mat1[i,4] = length(grep(dong1[i],mid$주소))
dong_mat1[i,5] = length(grep(dong1[i],hig$주소))
}
## 초기 행렬 생성
dong1 = dong_list("강화군")
dong_mat1 = matrix(0,nrow = length(dong1),ncol=5)
colnames(dong_mat1) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat1[,'동이름'] = dong1
dong_mat1[,'구이름'] = "강화군"
dong_mat1
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele[ele$구군별=='강화군',3]))
dong_mat1[i,4] = length(grep(dong1[i],mid[mid$구군별=='강화군',3]))
dong_mat1[i,5] = length(grep(dong1[i],hig[hig$구군별=='강화군',3]))
}
dong_mat1
d_list = c("계양구","남동구","동구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list)){
dong = dong_list(d_list[i])
dong_mat = matrix(0,nrow = length(dong),ncol=5)
colnames(dong_mat) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat[,'동이름'] = dong
dong_mat[,'구이름'] = d_list[i]
for(j in 1:length(dong)){
dong_mat1[j,3] = length(grep(dong1[j],ele[ele$구군별==d_list[i],3]))
dong_mat1[j,4] = length(grep(dong1[j],mid[mid$구군별==d_list[i],3]))
dong_mat1[j,5] = length(grep(dong1[j],hig[hig$구군별==d_list[i],3]))
}
dong_mat1 = rbind(dong_mat1,dong_mat)
}
# 데이터프레임화
dat = as.data.frame(dong_mat1,stringsAsFactors = F)
str(dat)
dat$초등학교개수 = as.numeric(dat$초등학교개수)
dat$중학교개수 = as.numeric(dat$중학교개수)
dat$고등학교개수 = as.numeric(dat$고등학교개수)
str(dat)
View(dat)
rm(list=ls())
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천초중고")
ele  = read.csv('./인천광역시초등학교현황.csv',header=T,stringsAsFactors=F)
mid  = read.csv('./인천광역시중학교현황.csv',header=T,stringsAsFactors=F)
hig  = read.csv('./인천광역시고등학교현황.csv',header=T,stringsAsFactors=F)
# 구별 동 벡터 생성 함수
dong_list=function(gu_name){
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수")
Gu = read.csv(file = paste("./인천광역시",gu_name,"인구수(new).csv",sep=''),header=T,stringsAsFactors=F)
Row = nrow(Gu)
Res = Gu[1:Row-1,"행정구역"]
Res = gsub('동','',Res)
return(Res)
}
## 초기 행렬 생성
dong1 = dong_list("강화군")
dong_mat1 = matrix(0,nrow = length(dong1),ncol=5)
colnames(dong_mat1) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat1[,'동이름'] = dong1
dong_mat1[,'구이름'] = "강화군"
dong_mat1
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele[ele$구군별=='강화군',3]))
dong_mat1[i,4] = length(grep(dong1[i],mid[mid$구군별=='강화군',3]))
dong_mat1[i,5] = length(grep(dong1[i],hig[hig$구군별=='강화군',3]))
}
dong_mat1
d_list = c("계양구","남동구","동구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list)){
dong = dong_list(d_list[i])
dong_mat = matrix(0,nrow = length(dong),ncol=5)
colnames(dong_mat) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat[,'동이름'] = dong
dong_mat[,'구이름'] = d_list[i]
for(j in 1:length(dong)){
dong_mat1[j,3] = length(grep(dong1[j],ele[ele$구군별==d_list[i],3]))
dong_mat1[j,4] = length(grep(dong1[j],mid[mid$구군별==d_list[i],3]))
dong_mat1[j,5] = length(grep(dong1[j],hig[hig$구군별==d_list[i],3]))
}
dong_mat1 = rbind(dong_mat1,dong_mat)
}
# 데이터프레임화
dat = as.data.frame(dong_mat1,stringsAsFactors = F)
str(dat)
for(i in 1:length(d_list)){
dong = dong_list(d_list[i])
dong_mat = matrix(0,nrow = length(dong),ncol=5)
colnames(dong_mat) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat[,'동이름'] = dong
dong_mat[,'구이름'] = d_list[i]
for(j in 1:length(dong)){
dong_mat[j,3] = length(grep(dong[j],ele[ele$구군별==d_list[i],3]))
dong_mat[j,4] = length(grep(dong[j],mid[mid$구군별==d_list[i],3]))
dong_mat[j,5] = length(grep(dong[j],hig[hig$구군별==d_list[i],3]))
}
dong_mat1 = rbind(dong_mat1,dong_mat)
}
rm(list=ls())
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천초중고")
ele  = read.csv('./인천광역시초등학교현황.csv',header=T,stringsAsFactors=F)
mid  = read.csv('./인천광역시중학교현황.csv',header=T,stringsAsFactors=F)
hig  = read.csv('./인천광역시고등학교현황.csv',header=T,stringsAsFactors=F)
# 구별 동 벡터 생성 함수
dong_list=function(gu_name){
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수")
Gu = read.csv(file = paste("./인천광역시",gu_name,"인구수(new).csv",sep=''),header=T,stringsAsFactors=F)
Row = nrow(Gu)
Res = Gu[1:Row-1,"행정구역"]
Res = gsub('동','',Res)
return(Res)
}
## 초기 행렬 생성
dong1 = dong_list("강화군")
dong_mat1 = matrix(0,nrow = length(dong1),ncol=5)
colnames(dong_mat1) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat1[,'동이름'] = dong1
dong_mat1[,'구이름'] = "강화군"
dong_mat1
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele[ele$구군별=='강화군',3]))
dong_mat1[i,4] = length(grep(dong1[i],mid[mid$구군별=='강화군',3]))
dong_mat1[i,5] = length(grep(dong1[i],hig[hig$구군별=='강화군',3]))
}
d_list = c("계양구","남동구","동구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list)){
dong = dong_list(d_list[i])
dong_mat = matrix(0,nrow = length(dong),ncol=5)
colnames(dong_mat) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat[,'동이름'] = dong
dong_mat[,'구이름'] = d_list[i]
for(j in 1:length(dong)){
dong_mat[j,3] = length(grep(dong[j],ele[ele$구군별==d_list[i],3]))
dong_mat[j,4] = length(grep(dong[j],mid[mid$구군별==d_list[i],3]))
dong_mat[j,5] = length(grep(dong[j],hig[hig$구군별==d_list[i],3]))
}
dong_mat1 = rbind(dong_mat1,dong_mat)
}
# 미추홀구만 따로
dong2 = dong_list("미추홀구")
dong_mat2 = matrix(0,nrow = length(dong2),ncol=5)
colnames(dong_mat2) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat2[,'동이름'] = dong2
dong_mat2[,'구이름'] = "미추홀구"
dong_mat2
for(i in 1:length(dong2)){
dong_mat2[i,3] = length(grep(dong2[i],ele[ele$구군별=='남구',3]))
dong_mat2[i,4] = length(grep(dong2[i],mid[mid$구군별=='남구',3]))
dong_mat2[i,5] = length(grep(dong2[i],hig[hig$구군별=='남구',3]))
}
dong_mat1 = rbind(dong_mat1,dong_mat2)
# 데이터프레임화
dat = as.data.frame(dong_mat1,stringsAsFactors = F)
str(dat)
dat$초등학교개수 = as.numeric(dat$초등학교개수)
dat$중학교개수 = as.numeric(dat$중학교개수)
dat$고등학교개수 = as.numeric(dat$고등학교개수)
View(dat)
# 분류된 것의 합계가 실제 합계랑 같은 지 비교
d_list1 = c("강화군","계양구","남동구","동구","미추홀구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list1)){
print(d_list1[i])
print(apply(dat[dat$구이름==d_list1[i],3:5],2,sum))
comp = cbind('초등학교개수'=nrow(ele[ele$구군별 ==d_list1[i],]),
'중학교개수'=nrow(mid[mid$구군별 ==d_list1[i],]),
'고등학교개수'=nrow(hig[hig$구군별 ==d_list1[i],]))
print(comp)
print("----------------")
}
rm(list=ls())
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천초중고")
ele  = read.csv('./인천광역시초등학교현황.csv',header=T,stringsAsFactors=F)
mid  = read.csv('./인천광역시중학교현황.csv',header=T,stringsAsFactors=F)
hig  = read.csv('./인천광역시고등학교현황.csv',header=T,stringsAsFactors=F)
# 구별 동 벡터 생성 함수
dong_list=function(gu_name){
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수")
Gu = read.csv(file = paste("./인천광역시",gu_name,"인구수(new).csv",sep=''),header=T,stringsAsFactors=F)
Row = nrow(Gu)
Res = Gu[1:Row-1,"행정구역"]
Res = gsub('동','',Res)
return(Res)
}
## 초기 행렬 생성
dong1 = dong_list("강화군")
dong_mat1 = matrix(0,nrow = length(dong1),ncol=5)
colnames(dong_mat1) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat1[,'동이름'] = dong1
dong_mat1[,'구이름'] = "강화군"
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele[ele$구군별=='강화군',3]))
dong_mat1[i,4] = length(grep(dong1[i],mid[mid$구군별=='강화군',3]))
dong_mat1[i,5] = length(grep(dong1[i],hig[hig$구군별=='강화군',4]))
}
for(i in 1:length(d_list)){
dong = dong_list(d_list[i])
dong_mat = matrix(0,nrow = length(dong),ncol=5)
colnames(dong_mat) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat[,'동이름'] = dong
dong_mat[,'구이름'] = d_list[i]
for(j in 1:length(dong)){
dong_mat[j,3] = length(grep(dong[j],ele[ele$구군별==d_list[i],3]))
dong_mat[j,4] = length(grep(dong[j],mid[mid$구군별==d_list[i],3]))
dong_mat[j,5] = length(grep(dong[j],hig[hig$구군별==d_list[i],4]))
}
dong_mat1 = rbind(dong_mat1,dong_mat)
}
rm(list=ls())
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천초중고")
ele  = read.csv('./인천광역시초등학교현황.csv',header=T,stringsAsFactors=F)
mid  = read.csv('./인천광역시중학교현황.csv',header=T,stringsAsFactors=F)
hig  = read.csv('./인천광역시고등학교현황.csv',header=T,stringsAsFactors=F)
# 구별 동 벡터 생성 함수
dong_list=function(gu_name){
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수")
Gu = read.csv(file = paste("./인천광역시",gu_name,"인구수(new).csv",sep=''),header=T,stringsAsFactors=F)
Row = nrow(Gu)
Res = Gu[1:Row-1,"행정구역"]
Res = gsub('동','',Res)
return(Res)
}
dong1 = dong_list("강화군")
dong_mat1 = matrix(0,nrow = length(dong1),ncol=5)
colnames(dong_mat1) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat1[,'동이름'] = dong1
dong_mat1[,'구이름'] = "강화군"
dong_mat1
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele[ele$구군별=='강화군',3]))
dong_mat1[i,4] = length(grep(dong1[i],mid[mid$구군별=='강화군',3]))
dong_mat1[i,5] = length(grep(dong1[i],hig[hig$구군별=='강화군',4]))
}
d_list = c("계양구","남동구","동구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list)){
dong = dong_list(d_list[i])
dong_mat = matrix(0,nrow = length(dong),ncol=5)
colnames(dong_mat) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat[,'동이름'] = dong
dong_mat[,'구이름'] = d_list[i]
for(j in 1:length(dong)){
dong_mat[j,3] = length(grep(dong[j],ele[ele$구군별==d_list[i],3]))
dong_mat[j,4] = length(grep(dong[j],mid[mid$구군별==d_list[i],3]))
dong_mat[j,5] = length(grep(dong[j],hig[hig$구군별==d_list[i],4]))
}
dong_mat1 = rbind(dong_mat1,dong_mat)
}
# 미추홀구만 따로
dong2 = dong_list("미추홀구")
dong_mat2 = matrix(0,nrow = length(dong2),ncol=5)
colnames(dong_mat2) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat2[,'동이름'] = dong2
dong_mat2[,'구이름'] = "미추홀구"
dong_mat2
for(i in 1:length(dong2)){
dong_mat2[i,3] = length(grep(dong2[i],ele[ele$구군별=='남구',3]))
dong_mat2[i,4] = length(grep(dong2[i],mid[mid$구군별=='남구',3]))
dong_mat2[i,5] = length(grep(dong2[i],hig[hig$구군별=='남구',4]))
}
dong_mat1 = rbind(dong_mat1,dong_mat2)
# 데이터프레임화
dat = as.data.frame(dong_mat1,stringsAsFactors = F)
dat$초등학교개수 = as.numeric(dat$초등학교개수)
dat$중학교개수 = as.numeric(dat$중학교개수)
dat$고등학교개수 = as.numeric(dat$고등학교개수)
View(dat)
# 분류된 것의 합계가 실제 합계랑 같은 지 비교
d_list1 = c("강화군","계양구","남동구","동구","미추홀구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list1)){
print(d_list1[i])
print(apply(dat[dat$구이름==d_list1[i],3:5],2,sum))
comp = cbind('초등학교개수'=nrow(ele[ele$구군별 ==d_list1[i],]),
'중학교개수'=nrow(mid[mid$구군별 ==d_list1[i],]),
'고등학교개수'=nrow(hig[hig$구군별 ==d_list1[i],]))
print(comp)
print("----------------")
}
# csv로 내보내기
write.csv(dat,file='인천광역시동별초중고현황.csv')
# 구별 동 벡터 생성 함수
dong_list=function(gu_name){
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수")
Gu = read.csv(file = paste("./인천광역시",gu_name,"인구수(new).csv",sep=''),header=T,stringsAsFactors=F)
Row = nrow(Gu)
Res = Gu[1:Row-1,"행정구역"]
Res = gsub('동$','',Res)
return(Res)
}
## 초기 행렬 생성
dong1 = dong_list("강화군")
dong1
dong_list("서")
dong_list("서구")
rm(list=ls())
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천초중고")
ele  = read.csv('./인천광역시초등학교현황.csv',header=T,stringsAsFactors=F)
mid  = read.csv('./인천광역시중학교현황.csv',header=T,stringsAsFactors=F)
hig  = read.csv('./인천광역시고등학교현황.csv',header=T,stringsAsFactors=F)
# 구별 동 벡터 생성 함수
dong_list=function(gu_name){
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수")
Gu = read.csv(file = paste("./인천광역시",gu_name,"인구수(new).csv",sep=''),header=T,stringsAsFactors=F)
Row = nrow(Gu)
Res = Gu[1:Row-1,"행정구역"]
Res = gsub('동$','',Res)
return(Res)
}
dong1 = dong_list("강화군")
dong_mat1 = matrix(0,nrow = length(dong1),ncol=5)
colnames(dong_mat1) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat1[,'동이름'] = dong1
dong_mat1[,'구이름'] = "강화군"
dong_mat1
for(i in 1:length(dong1)){
dong_mat1[i,3] = length(grep(dong1[i],ele[ele$구군별=='강화군',3]))
dong_mat1[i,4] = length(grep(dong1[i],mid[mid$구군별=='강화군',3]))
dong_mat1[i,5] = length(grep(dong1[i],hig[hig$구군별=='강화군',4]))
}
d_list = c("계양구","남동구","동구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list)){
dong = dong_list(d_list[i])
dong_mat = matrix(0,nrow = length(dong),ncol=5)
colnames(dong_mat) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat[,'동이름'] = dong
dong_mat[,'구이름'] = d_list[i]
for(j in 1:length(dong)){
dong_mat[j,3] = length(grep(dong[j],ele[ele$구군별==d_list[i],3]))
dong_mat[j,4] = length(grep(dong[j],mid[mid$구군별==d_list[i],3]))
dong_mat[j,5] = length(grep(dong[j],hig[hig$구군별==d_list[i],4]))
}
dong_mat1 = rbind(dong_mat1,dong_mat)
}
dong2 = dong_list("미추홀구")
dong_mat2 = matrix(0,nrow = length(dong2),ncol=5)
colnames(dong_mat2) = c("구이름","동이름","초등학교개수","중학교개수","고등학교개수")
dong_mat2[,'동이름'] = dong2
dong_mat2[,'구이름'] = "미추홀구"
dong_mat2
for(i in 1:length(dong2)){
dong_mat2[i,3] = length(grep(dong2[i],ele[ele$구군별=='남구',3]))
dong_mat2[i,4] = length(grep(dong2[i],mid[mid$구군별=='남구',3]))
dong_mat2[i,5] = length(grep(dong2[i],hig[hig$구군별=='남구',4]))
}
dong_mat1 = rbind(dong_mat1,dong_mat2)
# 데이터프레임화
dat = as.data.frame(dong_mat1,stringsAsFactors = F)
dat$초등학교개수 = as.numeric(dat$초등학교개수)
dat$중학교개수 = as.numeric(dat$중학교개수)
dat$고등학교개수 = as.numeric(dat$고등학교개수)
View(dat)
# 분류된 것의 합계가 실제 합계랑 같은 지 비교
d_list1 = c("강화군","계양구","남동구","동구","미추홀구","부평구","서구","연수구","옹진군","중구")
for(i in 1:length(d_list1)){
print(d_list1[i])
print(apply(dat[dat$구이름==d_list1[i],3:5],2,sum))
comp = cbind('초등학교개수'=nrow(ele[ele$구군별 ==d_list1[i],]),
'중학교개수'=nrow(mid[mid$구군별 ==d_list1[i],]),
'고등학교개수'=nrow(hig[hig$구군별 ==d_list1[i],]))
print(comp)
print("----------------")
}
# csv로 내보내기
write.csv(dat,file='../인천초중고/인천광역시동별초중고현황.csv')
# csv로 내보내기
write.csv(dat,file='../인천초중고/인천광역시동별초중고현황.csv')

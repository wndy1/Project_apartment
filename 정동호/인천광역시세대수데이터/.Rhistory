lines(x = hist.dat$mids,y = hist.dat$density,type='b',pch = 12)
summary(drink)
summary(dat)
quantile(dat)
windows()
qqnorm(dat)
## 통계부석방법론 숙제1 ##
install.packages('moments')
library(moments)
# 분포의 모양이 Skewed to the Right이다.
skewness(dat)
windows()
boxplot(dat)
# kurtosis
kurtosis(dat)
## 박스플롯
box_dat = boxplot(dat)
windows()
boxplot(dat)
points(x = box_dat$out,col=2)
windows()
boxplot(dat,main = "1966년 1967년 여름 LA 도심 오존농도 Box Plot")
points(x = box_dat$out,col=2)
box_dat$out
install.packages('psych')
library(psych)
describe(dat)
# kurtosis
kurtosis(dat) # 첨도 값이 3보다 크기에 꼬리가 두껍다고 할 수 있다.
graphics.off()
windows()
boxplot(dat,main = "1966년 1967년 여름 LA 도심 오존농도 Box Plot")
points(x = box_dat$out,col=2) # outlier 표시
box_dat$out # outlier 체크
windows()
qqnorm(dat,main = "정규확률그림")
windows()
qqnorm(dat,main = "정규확률그림")
points(x = max(dat),col=2)
windows()
qqnorm(dat,main = "정규확률그림")
points(y = max(dat),col=2)
# 전체적인 모양이 왼쪽으로 쏠리는 모양, 평균보다 중앙값이 오른쪽에 위치, outlier 존재가 보인다.
hist.dat$counts
graphics.off()
### 2
dat2 = matrix(data=c(16, 8, 14,
31,	16,	21,
18,	36,	25), byrow = T)
dat2
### 2
dat2 = matrix(data=c(16, 8, 14,
31,	16,	21,
18,	36,	25), nrow = 3,ncol=3,byrow = T)
dat2
rm(list=ls())
rownames(dat2) = c("약함","보통","좋음")
colnames(dat2) = c("진흙","모래흙","보통흙")
### 2
dat2 = matrix(data=c(16, 8, 14,
31,	16,	21,
18,	36,	25), nrow = 3,ncol=3,byrow = T)
rownames(dat2) = c("약함","보통","좋음")
colnames(dat2) = c("진흙","모래흙","보통흙")
dat2
windows()
plot(dat2)
windows()
plot(dat2[,1:3])
## 전체합, 행별 합, 열별 합
margin.table(dat2)
margin.table(dat2,margin = 1)
margin.table(dat2,margin = 2)
# 비슷한거로는 apply 존재
apply(dat2,MARGIN = 1)
# 비슷한거로는 apply 존재
apply(dat2,FUN=1)
# 비슷한거로는 apply 존재
apply(dat2,1,sum)
apply(dat2,2,sum)
windows()
par(mfrow=c(2,2))
barplot(margin.table(dat2,margin = 1),main = "성장결과")
pie(margin.table(dat2,margin = 1),main = "성장결과")
barplot(margin.table(dat2,margin = 2),main = "토양종류")
pie(margin.table(dat2,margin = 2),main = "토양종류")
install.packages('gmodels')
library(gmodels)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T)
mosaicplot(dat,color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T)
mosaicplot(dat2,color = T)
# 성장결과의 분포를 보면 약함, 보통, 좋음 순으로 증가하고, 보통과 좋은 수준은 비슷하다.
# 토양종류의 분포를 보면 진흙이 약간 많지만, 셋 다 모두 비율이 비슷하다.
?legend
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),col = c(1,2,3,))
mosaicplot(dat2,color = T)
legend("topright",legend = c("약함","보통","좋음"),fill = "box",col = c(1,2,3,))
legend("topright",legend = c("약함","보통","좋음"),box.col = c(1,2,3,))
legend("topright",legend = c("약함","보통","좋음"),box.col = c(1,2,3))
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),box.col = c(1,2,3))
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3))
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3),inset=.05)
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3),inset=-0.4)
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(2,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3))
barplot(t(dat2),beside =T,col=c(1,2,3))
legend("topright",legend = c("진흙","모래흙","보통흙"),fill=1:3,col = c(1,2,3))
mosaicplot(dat2,color = T)
mosaicplot(t(dat2),color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3), main = "토양종류에 따른 성장결과")
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3))
mosaicplot(dat2,color = T,main = "토양종류 VS. 성장결과")
windows()
par(mfrow=c(1,2))
barplot(t(dat2),beside =T,col=c(1,2,3),main = "성장결과에 따른 토양종류")
legend("topleft",legend = c("진흙","모래흙","보통흙"),fill=1:3,col = c(1,2,3))
mosaicplot(t(dat2),color = T, main = "토양종류 VS. 성장결과")
## 분할표
CrossTable(dat2)
?CrossTable
## 분할표
CrossTable(dat2,prop.r = F,prop.c = F,prop.t = F,chisq = T)
graphics.off()
rm(list=ls())
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
rm(list=ls())
rm(list=ls())
### 5장 2번
# (1)
a = 2; b = 8; n = 10; x = 2
theta = seq(0,1,length=100)
prior.theta = dbeta(theta,a,b)
post.theta = dbeta(theta,a+x,n-x+b) # conjugate prior에 따른 사후분포 또한 베타분포를 따른다
# (3)
# theta의 사후 표본 생성
theta.post = seq(0,1,length = 500)
rep(1,2)
# theta의 사후 표본 생성
theta = seq(0,1,length=500)
HPDsample(theta = theta,level = 0.95)
# (3)
# theta의 사후 표본을 이용하는 HPD구간 함수
HPDsample = function(theta,level = 0.95){
N=length(theta) #표본의 수
theta.sort = sort(theta) # 오름차순 정렬
M = ceiling(N*level) # 신뢰구간을 따르는 표본의 수
nCI = N-M # 가능한 신뢰구간의 수
CI.width = rep(0,nCI) # 가능한 신뢰구간의 수만큼 벡터 생성
for(i in 1:nCI)CI.width[i] = theta.sort[i+M]-theta.sort[i] # 신뢰구간의 길이 계산
index = which.min(CI.width) # 구간 중 가장 짧은 길이의 인덱스 값
HPD = c(theta.sort[index],theta.sort[index+M]) # 해당 길이의 theta값
return(HPD)
}
HPDsample(theta = theta,level = 0.95)
# theta의 사후 표본 생성
theta = rbeta(100,a+x,n-x+b)
HPDsample(theta = theta,level = 0.95)
# theta의 사후 표본 생성
pos_theta = rbeta(100,a+x,n-x+b)
HPDsample(theta = pos_theta,level = 0.95)
# theta의 사후 표본 생성
pos_theta = rbeta(100,a+x,n-x+b)
HPDsample(theta = pos_theta,level = 0.95)
## (4)
# theta의 사전표본
pri_theta = rbeta(100,a,b)
pos_theta = rbeta(100,a+x,n-x+b)
pos_eta = log(pos_theta/(1-pos_theta))
rm(list=ls())
### 5장 2번
## (1)
a = 2; b = 8; n = 10; x = 2
## (3)
# theta의 사후 표본을 이용하는 HPD구간 함수
HPDsample = function(theta,level = 0.95){
N=length(theta) #표본의 수
theta.sort = sort(theta) # 오름차순 정렬
M = ceiling(N*level) # 신뢰구간을 따르는 표본의 수
nCI = N-M # 가능한 신뢰구간의 수
CI.width = rep(0,nCI) # 가능한 신뢰구간의 수만큼 벡터 생성
for(i in 1:nCI)CI.width[i] = theta.sort[i+M]-theta.sort[i] # 신뢰구간의 길이 계산
index = which.min(CI.width) # 구간 중 가장 짧은 길이의 인덱스 값
HPD = c(theta.sort[index],theta.sort[index+M]) # 해당 길이의 theta값
return(HPD)
}
# theta의 사후 표본 생성
set.seed(1234) # 씨드 설정
pos_theta = rbeta(100,a+x,n-x+b)
# 95%수준의 최대사후구간
HPDsample(theta = pos_theta,level = 0.95)
## (4)
# theta의 사전표본
pri_theta = rbeta(100,a,b)
pos_theta = rbeta(100,a+x,n-x+b)
# 95%수준의 최대사후구간
HPDsample(theta = pos_theta,level = 0.95)
pri_eta = log(pri_theta/(1-pri_theta))
pos_eta = log(pos_theta/(1-pos_theta))
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="density")
lines(density(pri_eta),lwd=1, lty=1)
pri_theta = rbeta(1000,a,b)
# theta의 사후표본
pos_theta2 = rbeta(1000,a+x,n-x+b)
# 사전표본 오즈비
pri_eta = log(pri_theta/(1-pri_theta))
# 사후표본 오즈비
pos_eta = log(pos_theta2/(1-pos_theta2))
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="density",main = "사전표본 오즈비와 사후표본 오즈비 비교")
lines(density(pri_eta),lwd=1, lty=1)
# 최대사후구간
HPD = HPDsample(theta = pos_eta,level = 0.95)
abline(v = HPD,lwd = 2, lty =3 ,col=2)
legend("topright",legend=c("사후밀도함수","사전밀도함수","최대사후구간"),lty = c(2,1,3),
col = c("black","black","red"))
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="eta",ylab = "density",
main = "사전표본 오즈비와 사후표본 오즈비 비교")
lines(density(pri_eta),lwd=1, lty=1)
abline(v = HPD,lwd = 2, lty =3 ,col=2)
legend("topright",legend=c("사후밀도함수","사전밀도함수","최대사후구간"),lty = c(2,1,3),
col = c("black","black","red"))
### 5장 4번
n = 12; x = 3
### 5장 4번
n = 12; x = 3
# 12번의 독립적인 베루느이 시행 중 세번의 성공이 관측이라 가정
# 사전분포를 1 즉 beta(1,1)로 둔다.
a = 1; b = 1
# X_13 = 1 의 예측 확률은 결국 (a+x)/(a+b+n)이므로 사후분포의 평균 값이다.
X_13.prob = (a+x)/(a+b+n)
X_13.prob
### 5장 6번
# 그룹 1
n1 = 20; x1 = 10
# 그룹 2
n2 = 20; x2 = 14
# 사전분포는 beta(1,1)
a = 1; b = 1
# 그룹1의 사후분포는 beta(1+10,20-10+10) -> beta(11,20)이고
# 그룹2의 사후분포는 beta(1+14,20-14+1) -> beta(15,7) 이다.
# 각그룹별 사후표본 생성
theta_1 = rbeta(1000,11,20)
theta_2 = rbeta(1000,15,7)
# 로그오즈비
xi = log((theta_1/(1-theta_1)) / (theta_2/(1-theta_2)))
# 몬테칼로 방법(결국 사후표본으로 추정) 로그오즈비 추정치와 표준오차 게산
mean(xi)
# 몬테칼로 방법(결국 사후표본으로 추정) 로그오즈비 추정치와 표준오차 게산
mean(xi); sd(xi)
# 로그오즈비 사후밀도함수와 95% HPD 표시
HPD = HPDsample(theta = xi,level = 0.95)
windows()
plot(density(xi),type = 'l',lwd = 3,ylab = 'density',xlab = '로즈오즈비',
main = '로그오즈비 사후밀도함수와 HPD')
abline(v = HPD,lwd=2,lty=2,col=2)
legend("topright",legend=c("사후밀도함수","95% 최대사후구간"),lwd=c(3,2),col = c("black",2))
windows()
plot(density(xi),type = 'l',lwd = 3,ylab = 'density',xlab = '로즈오즈비',
main = '로그오즈비 사후밀도함수와 HPD')
abline(v = HPD,lwd=2,lty=2,col=2)
legend("topright",legend=c("사후밀도함수","95% 최대사후구간"),lwd=c(3,2),lty = c(1,2),col = c("black",2))
rm(list=ls())
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
### 3장 4번
# x의 개수
# (x1,x2,x3,x4,x5) = (1,1,0,0,1)
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
rm(list=ls())
### 3장 4번
# x의 개수
# (x1,x2,x3,x4,x5) = (1,1,0,0,1)
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prior_theta)
# posterior dist
pos_dist = (lh_dist*prior_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
windows()
plot(x = theta, y = pos_dist)
plot(x = theta_1, y = pos_dist)
windows()
plot(x = theta_1,type='h', y = pos_dist)
### 3장 5번
# (1)
lh_dist[5]
# 0.03125
# (2)
marg_dist
### 5장 2번
## (1)
a = 2; b = 8; n = 10; x = 2
theta = seq(0,1,length=100)
prior.theta = dbeta(theta,a,b)
post.theta = dbeta(theta,a+x,n-x+b) # conjugate prior에 따른 사후분포 또한 베타분포를 따른다
windows()
plot(x = theta,y=post.theta,col=2,type='l')
lines(x = theta,y= prior.theta)
legend("topright",legend=c(paste("beta(",a+x,",",n-x+b,") posterior"),
paste("beta(",a,",",b,") prior")),lty=c(1,1), col=c(2,"black"))
## (3)
# theta의 사후 표본을 이용하는 HPD구간 함수
HPDsample = function(theta,level = 0.95){
N=length(theta) #표본의 수
theta.sort = sort(theta) # 오름차순 정렬
M = ceiling(N*level) # 신뢰구간을 따르는 표본의 수
nCI = N-M # 가능한 신뢰구간의 수
CI.width = rep(0,nCI) # 가능한 신뢰구간의 수만큼 벡터 생성
for(i in 1:nCI)CI.width[i] = theta.sort[i+M]-theta.sort[i] # 신뢰구간의 길이 계산
index = which.min(CI.width) # 구간 중 가장 짧은 길이의 인덱스 값
HPD = c(theta.sort[index],theta.sort[index+M]) # 해당 길이의 theta값
return(HPD)
}
# theta의 사후 표본 생성
set.seed(1234) # 씨드 설정
pos_theta = rbeta(100,a+x,n-x+b)
# 95%수준의 최대사후구간
HPDsample(theta = pos_theta,level = 0.95)
pri_theta = rbeta(1000,a,b)
# theta의 사후표본
pos_theta2 = rbeta(1000,a+x,n-x+b)
# 사전표본 오즈비
pri_eta = log(pri_theta/(1-pri_theta))
# 사후표본 오즈비
pos_eta = log(pos_theta2/(1-pos_theta2))
# 최대사후구간
HPD = HPDsample(theta = pos_eta,level = 0.95)
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="eta",ylab = "density",
main = "사전표본 오즈비와 사후표본 오즈비 비교")
lines(density(pri_eta),lwd=1, lty=1)
abline(v = HPD,lwd = 2, lty =3 ,col=2)
legend("topright",legend=c("사후밀도함수","사전밀도함수","최대사후구간"),lty = c(2,1,3),
col = c("black","black","red"))
### 5장 4번
n = 12; x = 3
# 12번의 독립적인 베루느이 시행 중 세번의 성공이 관측이라 가정
# 사전분포를 1 즉 beta(1,1)로 둔다.
a = 1; b = 1
# posterior dist
theta = seq(0,1,length=50)
post.dist = dbeta(theta,a+x,n-x+b)
# X_13 = 1 의 예측 확률은 결국 (a+x)/(a+b+n)이므로 사후분포의 평균 값이다.
X_13.prob = (a+x)/(a+b+n)
X_13.prob
### 5장 6번
# 그룹 1
n1 = 20; x1 = 10
# 그룹 2
n2 = 20; x2 = 14
# 사전분포는 beta(1,1)
a = 1; b = 1
# 그룹1의 사후분포는 beta(1+10,20-10+10) -> beta(11,20)이고
# 그룹2의 사후분포는 beta(1+14,20-14+1) -> beta(15,7) 이다.
# 각그룹별 사후표본 생성
theta_1 = rbeta(1000,11,20)
theta_2 = rbeta(1000,15,7)
# 로그오즈비
xi = log((theta_1/(1-theta_1)) / (theta_2/(1-theta_2)))
# 몬테칼로 방법(결국 사후표본으로 추정) 로그오즈비 추정치와 표준오차 게산
mean(xi); sd(xi)
# 로그오즈비 사후밀도함수와 95% HPD 표시
HPD = HPDsample(theta = xi,level = 0.95)
windows()
plot(density(xi),type = 'l',lwd = 3,ylab = 'density',xlab = '로즈오즈비',
main = '로그오즈비 사후밀도함수와 HPD')
abline(v = HPD,lwd=2,lty=2,col=2)
legend("topright",legend=c("사후밀도함수","95% 최대사후구간"),lwd=c(3,2),lty = c(1,2),col = c("black",2))
rm(list=ls())
getwd()
setwd('C:/Users/wndy4/Desktop/Project_DEMA/정동호')
dat = read.csv('인천광역시동별아파트매매가격변동(월단위).csv',header=T,stringsAsFactors=F)
View(dat)
which(is.na(dat$X2016.01))
dat = dat[-a,]
a = which(is.na(dat$X2016.01))
dat = dat[-a,]
colnames(dat)
colnames(dat) = gsub('X','',colnames(dat))
str(dat)
write.csv(dat,file='인천광역시동별아파트매매가격변동(월단위)new.csv')
library(xlsx)
dat = read.xlsx('인천지역 아파트 규모별 매매가격 변동(월단위).xlsx',header=T,stringsAsFactors=F)
View(dat)
dat = read.xlsx('인천지역 아파트 규모별 매매가격 변동(월단위).xlsx',sheetIndex=1,header=T,stringsAsFactors=F)
rm(list=ls())
# 1동, 2동 등 결합하는 함수
# 세대수의 경우
dong_merge=function(gu_name){
setwd('C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시세대수') # working directory 설정
# csv 파일 불러오기
Gu = read.csv(paste('인천광역시',gu_name,'세대수.csv',sep=''),header=T,stringsAsFactors=F)
# 행정구역의 숫자제거
Gu$행정구역=gsub("\\d",'',Gu$행정구역)
# Gu 파일의 행, 열 개수
Gu_dim = dim(Gu)
# 행정구역 중복제거
Gu_list = unique(Gu$행정구역)
# 새로운 행을 생성하는 j
j = Gu_dim[1]+1
# 중복 행, 행 간 결합
for (i in Gu_list) {
a = apply(Gu[Gu$행정구역==i,2:37],2,sum)
Gu[j,2:37]=a
Gu[j,1] = i
j=j+1
}
# 필요없는 행 제거
Gu = Gu[-1:-Gu_dim[1],]
# 행의 X2016.01에서 X 제거
colnames(Gu) = gsub("X","",colnames(Gu))
# csv 파일 내보내기
write.csv(Gu,file=paste('인천광역시',gu_name,'세대수(new).csv',sep=''))
}
dong_merge('강화군')
dong_merge('계양구')
dong_merge('남동구')
dong_merge('동구')
dong_merge('동구')
dong_merge('미추홀구')
dong_merge('미추홀구')
dong_merge('부평구')
dong_merge('서구')
dong_merge('연수구')
dong_merge('옹진군')
dong_merge('중구')

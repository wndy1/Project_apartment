legend("topright",legend = c("약함","보통","좋음"),box.col = c(1,2,3))
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),box.col = c(1,2,3))
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3))
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3),inset=.05)
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3),inset=-0.4)
mosaicplot(dat2,color = T)
windows()
par(mfrow=c(2,2))
barplot(dat2,beside =T,col=c(1,2,3))
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3))
barplot(t(dat2),beside =T,col=c(1,2,3))
legend("topright",legend = c("진흙","모래흙","보통흙"),fill=1:3,col = c(1,2,3))
mosaicplot(dat2,color = T)
mosaicplot(t(dat2),color = T)
windows()
par(mfrow=c(1,2))
barplot(dat2,beside =T,col=c(1,2,3), main = "토양종류에 따른 성장결과")
legend("topright",legend = c("약함","보통","좋음"),fill=1:3,col = c(1,2,3))
mosaicplot(dat2,color = T,main = "토양종류 VS. 성장결과")
windows()
par(mfrow=c(1,2))
barplot(t(dat2),beside =T,col=c(1,2,3),main = "성장결과에 따른 토양종류")
legend("topleft",legend = c("진흙","모래흙","보통흙"),fill=1:3,col = c(1,2,3))
mosaicplot(t(dat2),color = T, main = "토양종류 VS. 성장결과")
## 분할표
CrossTable(dat2)
?CrossTable
## 분할표
CrossTable(dat2,prop.r = F,prop.c = F,prop.t = F,chisq = T)
graphics.off()
rm(list=ls())
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
rm(list=ls())
rm(list=ls())
### 5장 2번
# (1)
a = 2; b = 8; n = 10; x = 2
theta = seq(0,1,length=100)
prior.theta = dbeta(theta,a,b)
post.theta = dbeta(theta,a+x,n-x+b) # conjugate prior에 따른 사후분포 또한 베타분포를 따른다
# (3)
# theta의 사후 표본 생성
theta.post = seq(0,1,length = 500)
rep(1,2)
# theta의 사후 표본 생성
theta = seq(0,1,length=500)
HPDsample(theta = theta,level = 0.95)
# (3)
# theta의 사후 표본을 이용하는 HPD구간 함수
HPDsample = function(theta,level = 0.95){
N=length(theta) #표본의 수
theta.sort = sort(theta) # 오름차순 정렬
M = ceiling(N*level) # 신뢰구간을 따르는 표본의 수
nCI = N-M # 가능한 신뢰구간의 수
CI.width = rep(0,nCI) # 가능한 신뢰구간의 수만큼 벡터 생성
for(i in 1:nCI)CI.width[i] = theta.sort[i+M]-theta.sort[i] # 신뢰구간의 길이 계산
index = which.min(CI.width) # 구간 중 가장 짧은 길이의 인덱스 값
HPD = c(theta.sort[index],theta.sort[index+M]) # 해당 길이의 theta값
return(HPD)
}
HPDsample(theta = theta,level = 0.95)
# theta의 사후 표본 생성
theta = rbeta(100,a+x,n-x+b)
HPDsample(theta = theta,level = 0.95)
# theta의 사후 표본 생성
pos_theta = rbeta(100,a+x,n-x+b)
HPDsample(theta = pos_theta,level = 0.95)
# theta의 사후 표본 생성
pos_theta = rbeta(100,a+x,n-x+b)
HPDsample(theta = pos_theta,level = 0.95)
## (4)
# theta의 사전표본
pri_theta = rbeta(100,a,b)
pos_theta = rbeta(100,a+x,n-x+b)
pos_eta = log(pos_theta/(1-pos_theta))
rm(list=ls())
### 5장 2번
## (1)
a = 2; b = 8; n = 10; x = 2
## (3)
# theta의 사후 표본을 이용하는 HPD구간 함수
HPDsample = function(theta,level = 0.95){
N=length(theta) #표본의 수
theta.sort = sort(theta) # 오름차순 정렬
M = ceiling(N*level) # 신뢰구간을 따르는 표본의 수
nCI = N-M # 가능한 신뢰구간의 수
CI.width = rep(0,nCI) # 가능한 신뢰구간의 수만큼 벡터 생성
for(i in 1:nCI)CI.width[i] = theta.sort[i+M]-theta.sort[i] # 신뢰구간의 길이 계산
index = which.min(CI.width) # 구간 중 가장 짧은 길이의 인덱스 값
HPD = c(theta.sort[index],theta.sort[index+M]) # 해당 길이의 theta값
return(HPD)
}
# theta의 사후 표본 생성
set.seed(1234) # 씨드 설정
pos_theta = rbeta(100,a+x,n-x+b)
# 95%수준의 최대사후구간
HPDsample(theta = pos_theta,level = 0.95)
## (4)
# theta의 사전표본
pri_theta = rbeta(100,a,b)
pos_theta = rbeta(100,a+x,n-x+b)
# 95%수준의 최대사후구간
HPDsample(theta = pos_theta,level = 0.95)
pri_eta = log(pri_theta/(1-pri_theta))
pos_eta = log(pos_theta/(1-pos_theta))
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="density")
lines(density(pri_eta),lwd=1, lty=1)
pri_theta = rbeta(1000,a,b)
# theta의 사후표본
pos_theta2 = rbeta(1000,a+x,n-x+b)
# 사전표본 오즈비
pri_eta = log(pri_theta/(1-pri_theta))
# 사후표본 오즈비
pos_eta = log(pos_theta2/(1-pos_theta2))
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="density",main = "사전표본 오즈비와 사후표본 오즈비 비교")
lines(density(pri_eta),lwd=1, lty=1)
# 최대사후구간
HPD = HPDsample(theta = pos_eta,level = 0.95)
abline(v = HPD,lwd = 2, lty =3 ,col=2)
legend("topright",legend=c("사후밀도함수","사전밀도함수","최대사후구간"),lty = c(2,1,3),
col = c("black","black","red"))
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="eta",ylab = "density",
main = "사전표본 오즈비와 사후표본 오즈비 비교")
lines(density(pri_eta),lwd=1, lty=1)
abline(v = HPD,lwd = 2, lty =3 ,col=2)
legend("topright",legend=c("사후밀도함수","사전밀도함수","최대사후구간"),lty = c(2,1,3),
col = c("black","black","red"))
### 5장 4번
n = 12; x = 3
### 5장 4번
n = 12; x = 3
# 12번의 독립적인 베루느이 시행 중 세번의 성공이 관측이라 가정
# 사전분포를 1 즉 beta(1,1)로 둔다.
a = 1; b = 1
# X_13 = 1 의 예측 확률은 결국 (a+x)/(a+b+n)이므로 사후분포의 평균 값이다.
X_13.prob = (a+x)/(a+b+n)
X_13.prob
### 5장 6번
# 그룹 1
n1 = 20; x1 = 10
# 그룹 2
n2 = 20; x2 = 14
# 사전분포는 beta(1,1)
a = 1; b = 1
# 그룹1의 사후분포는 beta(1+10,20-10+10) -> beta(11,20)이고
# 그룹2의 사후분포는 beta(1+14,20-14+1) -> beta(15,7) 이다.
# 각그룹별 사후표본 생성
theta_1 = rbeta(1000,11,20)
theta_2 = rbeta(1000,15,7)
# 로그오즈비
xi = log((theta_1/(1-theta_1)) / (theta_2/(1-theta_2)))
# 몬테칼로 방법(결국 사후표본으로 추정) 로그오즈비 추정치와 표준오차 게산
mean(xi)
# 몬테칼로 방법(결국 사후표본으로 추정) 로그오즈비 추정치와 표준오차 게산
mean(xi); sd(xi)
# 로그오즈비 사후밀도함수와 95% HPD 표시
HPD = HPDsample(theta = xi,level = 0.95)
windows()
plot(density(xi),type = 'l',lwd = 3,ylab = 'density',xlab = '로즈오즈비',
main = '로그오즈비 사후밀도함수와 HPD')
abline(v = HPD,lwd=2,lty=2,col=2)
legend("topright",legend=c("사후밀도함수","95% 최대사후구간"),lwd=c(3,2),col = c("black",2))
windows()
plot(density(xi),type = 'l',lwd = 3,ylab = 'density',xlab = '로즈오즈비',
main = '로그오즈비 사후밀도함수와 HPD')
abline(v = HPD,lwd=2,lty=2,col=2)
legend("topright",legend=c("사후밀도함수","95% 최대사후구간"),lwd=c(3,2),lty = c(1,2),col = c("black",2))
rm(list=ls())
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
### 3장 4번
# x의 개수
# (x1,x2,x3,x4,x5) = (1,1,0,0,1)
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prob_theta)
# posterior dist
pos_dist = (lh_dist*prob_theta)/marg_dist
rm(list=ls())
### 3장 4번
# x의 개수
# (x1,x2,x3,x4,x5) = (1,1,0,0,1)
nx = 3
# 사전분포는 이산균일분포를 따른다
theta_1 = seq(0.1,0.9,by=0.1)
prior_theta = 1/9
# 가능도 함수
lh_dist = (theta_1^nx)*((1-theta_1)^(5-nx))
lh_dist
# x에 대한 marginal dist
marg_dist = sum(lh_dist*prior_theta)
# posterior dist
pos_dist = (lh_dist*prior_theta)/marg_dist
pos_dist
# theta = 0.5일때 posterior dist 확률
pos_dist[5]
windows()
plot(x = theta, y = pos_dist)
plot(x = theta_1, y = pos_dist)
windows()
plot(x = theta_1,type='h', y = pos_dist)
### 3장 5번
# (1)
lh_dist[5]
# 0.03125
# (2)
marg_dist
### 5장 2번
## (1)
a = 2; b = 8; n = 10; x = 2
theta = seq(0,1,length=100)
prior.theta = dbeta(theta,a,b)
post.theta = dbeta(theta,a+x,n-x+b) # conjugate prior에 따른 사후분포 또한 베타분포를 따른다
windows()
plot(x = theta,y=post.theta,col=2,type='l')
lines(x = theta,y= prior.theta)
legend("topright",legend=c(paste("beta(",a+x,",",n-x+b,") posterior"),
paste("beta(",a,",",b,") prior")),lty=c(1,1), col=c(2,"black"))
## (3)
# theta의 사후 표본을 이용하는 HPD구간 함수
HPDsample = function(theta,level = 0.95){
N=length(theta) #표본의 수
theta.sort = sort(theta) # 오름차순 정렬
M = ceiling(N*level) # 신뢰구간을 따르는 표본의 수
nCI = N-M # 가능한 신뢰구간의 수
CI.width = rep(0,nCI) # 가능한 신뢰구간의 수만큼 벡터 생성
for(i in 1:nCI)CI.width[i] = theta.sort[i+M]-theta.sort[i] # 신뢰구간의 길이 계산
index = which.min(CI.width) # 구간 중 가장 짧은 길이의 인덱스 값
HPD = c(theta.sort[index],theta.sort[index+M]) # 해당 길이의 theta값
return(HPD)
}
# theta의 사후 표본 생성
set.seed(1234) # 씨드 설정
pos_theta = rbeta(100,a+x,n-x+b)
# 95%수준의 최대사후구간
HPDsample(theta = pos_theta,level = 0.95)
pri_theta = rbeta(1000,a,b)
# theta의 사후표본
pos_theta2 = rbeta(1000,a+x,n-x+b)
# 사전표본 오즈비
pri_eta = log(pri_theta/(1-pri_theta))
# 사후표본 오즈비
pos_eta = log(pos_theta2/(1-pos_theta2))
# 최대사후구간
HPD = HPDsample(theta = pos_eta,level = 0.95)
windows()
plot(density(pos_eta),type='l',lwd = 2,lty=2,xlab="eta",ylab = "density",
main = "사전표본 오즈비와 사후표본 오즈비 비교")
lines(density(pri_eta),lwd=1, lty=1)
abline(v = HPD,lwd = 2, lty =3 ,col=2)
legend("topright",legend=c("사후밀도함수","사전밀도함수","최대사후구간"),lty = c(2,1,3),
col = c("black","black","red"))
### 5장 4번
n = 12; x = 3
# 12번의 독립적인 베루느이 시행 중 세번의 성공이 관측이라 가정
# 사전분포를 1 즉 beta(1,1)로 둔다.
a = 1; b = 1
# posterior dist
theta = seq(0,1,length=50)
post.dist = dbeta(theta,a+x,n-x+b)
# X_13 = 1 의 예측 확률은 결국 (a+x)/(a+b+n)이므로 사후분포의 평균 값이다.
X_13.prob = (a+x)/(a+b+n)
X_13.prob
### 5장 6번
# 그룹 1
n1 = 20; x1 = 10
# 그룹 2
n2 = 20; x2 = 14
# 사전분포는 beta(1,1)
a = 1; b = 1
# 그룹1의 사후분포는 beta(1+10,20-10+10) -> beta(11,20)이고
# 그룹2의 사후분포는 beta(1+14,20-14+1) -> beta(15,7) 이다.
# 각그룹별 사후표본 생성
theta_1 = rbeta(1000,11,20)
theta_2 = rbeta(1000,15,7)
# 로그오즈비
xi = log((theta_1/(1-theta_1)) / (theta_2/(1-theta_2)))
# 몬테칼로 방법(결국 사후표본으로 추정) 로그오즈비 추정치와 표준오차 게산
mean(xi); sd(xi)
# 로그오즈비 사후밀도함수와 95% HPD 표시
HPD = HPDsample(theta = xi,level = 0.95)
windows()
plot(density(xi),type = 'l',lwd = 3,ylab = 'density',xlab = '로즈오즈비',
main = '로그오즈비 사후밀도함수와 HPD')
abline(v = HPD,lwd=2,lty=2,col=2)
legend("topright",legend=c("사후밀도함수","95% 최대사후구간"),lwd=c(3,2),lty = c(1,2),col = c("black",2))
### 인천광역시 월별 구별 인구수(new) EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시인구수')
## Load csv file
dat = read.csv('인천광역시 월별 구별 인구수(new).csv',header=T,stringsAsFactors=F)
## 열명 수정
colnames(dat) = gsub('X','',colnames(dat))
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$구.이름)
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$구.이름==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 인구수 변화',sep=''),
ylab = paste('인천광역시',' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
### 인천광역시 월별 구별 세대수(new) EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천광역시세대수')
## Load csv file
dat = read.csv('인천광역시 월별 구별 세대수(new).csv',header=T,stringsAsFactors=F)
## 열명 수정
colnames(dat) = gsub('X','',colnames(dat))
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$구.이름)
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$구.이름==gu_name[i] & dat$행정구역=="합계")
}
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 세대수 변화',sep=''),
ylab = paste(gu_name[i],' 세대수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 세대수 변화',sep=''),
ylab = paste('인천광역시',' 세대수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
### 인천광역시 월별 구별 아파트 매매가격 변동(new) EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:/Users/wndy4/Desktop/Project_DEMA/정동호')
## Load csv file
dat = read.csv('인천광역시동별아파트매매가격변동(월단위)new2.csv',header=T,stringsAsFactors=F)
## 열명 수정
colnames(dat) = gsub('X','',colnames(dat))
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$구군)
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$구군==gu_name[i] & dat$지역=="전체")
}
gu_sumrow
gu_dat = t(dat[gu_sumrow,3:38])
incheon_mean = ceiling(apply(gu_dat, 1,mean))
gu_dat = cbind(gu_dat,incheon_mean)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
windows()
par(mfrow=c(2,ceiling(ncol(ts_gu_mat)/2)))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 아파트 매매 가격 변화',sep=''),
ylab = paste(gu_name[i],' 아파트 매매 가격',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,ncol(ts_gu_mat)]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,ncol(ts_gu_mat)])$tsp
windows()
plot(ts_gu_mat[,ncol(ts_gu_mat)],xaxt = "n",main = paste('인천광역시',' 아파트 매매 가격 변화',sep=''),
ylab = paste('인천광역시',' 아파트 매매 가격',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,ncol(ts_gu_mat)]), labels = format(dates,"%Y%m"))
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,ncol(ts_gu_mat)]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,ncol(ts_gu_mat)])$tsp
windows()
plot(ts_gu_mat[,ncol(ts_gu_mat)],xaxt = "n",main = paste('인천광역시',' 아파트 매매 가격 변화',sep=''),
xlab = '201601 ~ 201812',ylab=NULL,ylim = c(140,340),lty=2,lwd=2,col=1)
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,ncol(ts_gu_mat)]), labels = format(dates,"%Y%m"))
text(x=tsp[1],y=ts_gu_mat[1,ncol(ts_gu_mat)],labels = c('전체'),pos=2)
for(i in 1:9){
lines(ts_gu_mat[,i],lty=1,col=i+1,lwd=2)
text(x=tsp[1],y=ts_gu_mat[1,i],labels = c(gu_name[i]),pos=2)
}
## 인천광역시 동별 아파트 매매 가격 시계열 그래프
## 구군별로 읍면동 시계열 데이터 매트릭스 생성하는 함수
dong_list = function(Gu_name){
dong_row = which(dat$구군==Gu_name)
dong_dat = t(dat[dong_row,3:38])
ts_dong_mat = ts(data = dong_dat,start = c(2016),frequency = 36)
return(ts_dong_mat)
}
for (i in 1:length(gu_name)){
a = dong_list(gu_name[i])
dong_name = dat[dat$구군==gu_name[i],2]
windows()
par(mfrow=c(3,ceiling(ncol(a)/3)))  # 그래프 구역 갯수 설정을 위한 숫자
for(j in 1:ncol(a)){
dates = seq(as.Date("2016-01-01"), by = "month", along = a[,j]) # 날짜 201601~201812 생
tsp = attributes(a[,j])$tsp
plot(a[,j],xaxt = "n",main = paste(gu_name[i],' ',dong_name[j],' 아파트 매매 가격 변화',sep=''),
ylab = paste(gu_name[i],' ',dong_name[j],' 아파트 매매 가격',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = a[,j]), labels = format(dates,"%Y%m"))
}
}
graphics.off()
rm(list=ls())
### 인천광역시 초중고현황 EDA ###
## set working directory
setwd("C:/Users/wndy4/Desktop/Project_DEMA/정동호/인천초중고")
## load csv file
dat = read.csv('인천광역시동별초중고현황.csv',header = T, stringsAsFactors=F)
## 각 구군별 초중고 현황 파악 막대 그래프 및 파이차트
gu_name = unique(dat$구이름)
## 분할표
library(gmodels)
## 각 구별 초중고 현황 매트릭스 만들기
gu_sum_mat = apply(dat[dat$구이름==gu_name[1],3:5],2,sum)
for(i in 2:length(gu_name)){
b = apply(dat[dat$구이름==gu_name[i],3:5],2,sum)
gu_sum_mat = rbind(gu_sum_mat,b)
}
rownames(gu_sum_mat) = gu_name
gu_sum_mat
dim(gu_sum_mat)
CrossTable(gu_sum_mat)
CrossTable(gu_sum_mat,prop.r = F,prop.c = F,prop.t = F,chisq = T)
rm(list=ls())

#### 결정트리 학습법2 평균전세가 제외
# rpart package 사용
# tree package 이용
library(tree)
library(caret)
library(rpart)
library(party)
graphics.off()
## load train.csv file
setwd("C:/Users/wndy4/Desktop/Project_DEMA")

train = read.csv('train set.csv',header = T, stringsAsFactors = F)


View(train)

# 불필요한 항목 제거
# 평균전세가 항목 제거
train = train[,-c(1,2,3,10)]

##

## validation
# 검증 작업
valid = read.csv('validation set.csv',header = T,stringsAsFactors = F)
valid = valid[,-c(1,2,3,10)]
## test set
test = read.csv('test set.csv',header=T,stringsAsFactors = F)
test = test[,-c(1,2,3,10)]

?rpart
?rpart.control
control = rpart.control(xval = 10,cp=0, minsplit = 100)
?rpart.control
# xval : 교차 타당성의 fold 개수
# cp : complexity parameter, 오분류값, cp=0이면 오분류값 최소, 디폴트는 0.01
# minsplit : 한 노드를 분할하기 위해 필요한 데이터의 개수
# tree2 = rpart(train$평균매매가.제곱미터당.만원.~.,data=train,method = 'anova',control = control)

## 초기 모형
tree = rpart(train$평균매매가~.,data=train,method = 'anova')

x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 초기 모형(평균전세가 미포함)")
text(tree, use.n=T)

tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = rpart.control(cp=0))
printcp(tree1)
x11()
plotcp(tree1)


# train mse
minsplit = c(146)
mse1 = NULL
for(i in 1:length(minsplit)){
  control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
  tree1 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
  #printcp(tree2)
  #x11()
  #plotcp(tree2)
  predict1.train = predict(tree1,newdata = train)
  y = train$평균매매가
  y_hat = predict1.train
  e = y - y_hat
  mse1[i] = mean(e^2)
}
mse1



# validaiton mse
minsplit = c(146)
mse2 = NULL
for(i in 1:length(minsplit)){
  control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
  tree2 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
  #printcp(tree2)
  #x11()
  #plotcp(tree2)
  predict2.valid = predict(tree2,newdata = valid)
  y = valid$평균매매가
  y_hat = predict2.valid
  e = y - y_hat
  mse2[i] = mean(e^2)
}
mse2
graphics.off()

# 겹쳐보기
x11()
plot(x=minsplit,y=mse1,type='l',main="minsplit에 따른 Train MSE와 validation MSE 변화 비교")
lines(x=minsplit,y=mse2,col=2)
legend("topleft",legend = c("train MSE","validation MSE"),lty = c(1,1),col=c("black","red"))

# Pruning
tree = rpart(train$평균매매가~.,data=train,method = 'anova',control = rpart.control(xval=10,minsplit = 146,cp=0))
x11()
plotcp(tree)
printcp(tree)
?rpart.control

x11()
plot(tree,uniform=T,margin=0.1,main = "인천아파트 평균매매가 의사결정 최종모형(평균전세가 미포함)")
text(tree, use.n=T)

# test set 적용 mse 값 확인
minsplit = c(146)
mse3 = NULL
for(i in 1:length(minsplit)){
  control = rpart.control(xval = 10,cp=0, minsplit = minsplit[i])
  tree3 = rpart(train$평균매매가~.,data=train,method = 'anova',control = control)
  #printcp(tree2)
  #x11()
  #plotcp(tree2)
  predict3.test = predict(tree3,newdata = test)
  y = test$평균매매가
  y_hat = predict3.test
  e = y - y_hat
  mse3[i] = mean(e^2)
}
mse3 
# minsplit = 125(terminal node = 15)
# train MSE = 2058.659
# validaion MSE = 2010.161
# test MSE = 2244.963

# 더빈 왓슨 통계량이 2보다 크므로, 자기상관성이 없다고 볼 수 있다.
# 선형성
res.train = resid(reg.train)
x11()
plot(res.train ~ fitted(reg.train))
# 등분산성
x11()
plot(rstandard(reg.train))
x11()
plot(rstudent(reg.train))
## 정규성 검정
# histogram
x11()
hist(res.train)
# skewness & kurtosis
skewness(res.train)
agostino.test(res.train) # p-value가 유의수준 0.05보다 작으므로 skewness는 0이 아니라 할 수 있다.
kurtosis(res.train)
anscombe.test(res.train) # p-vlaue가 유의수준 0.05보다 작으므로 kurtosis는 3이 아니라 할 수 있다.
shapiro.test(res.train)
lillie.test(res.train)
ad.test(res.train)
x11()
qqnorm(res.train)
qqline(res.train,col=2)
# 잔차의 정규성에 대한 검정은 맞지 않다고 하지만, 중심극한정리에 따라 샘플의 수가 많기 때문에 상관없다?
## 다중공선성
x11()
corrplot.mixed(cor(train[,2:15]))
# x11()
# pairs(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15,data = train)
vif(reg.train)>10
# vif > 10 다중공선성이 존재한다고 볼 수 있다.
# X11과 X12이 다중공선성이 존재한다고 볼 수 있다.
# X11 : 평균인구수
# X12 : 평균세대수
# 평균인구수와 평균세대수의 상관관계 분석
cor(X11,X12)
cor(Y,X11)
cor(Y,X12)
x11()
plot(X11,X12)
summary(reg.train)
### VIF 존재에 따른 모델 선택
## 원래 모델에 variable selection
## X11 제거 후 or X12 제거 후 비교해서 회귀모형 진단후 variable selection
## 1. 원래 모델에 variable selection
reg.train1 = lm(Y~1,data=train)
# stepwise selection
step(reg.train1, scope = list(upper = reg.train,lower = reg.train1),direction = 'both')
# Y ~ X6 + X4 + X13 + factor(X14) + X5 + X9 + X11 + X12 + X2 + X15 + X7 + x8
# 빠진 변수 : X1, X3, X10
reg.train.stepwise1 = lm(Y ~ X2+X4+X5+X6+X7+X8+X9+X11+X12+X13+factor(X14)+X15,data=train)
coef.stepwise1 = reg.train.stepwise1$coefficients
summary(reg.train.stepwise1)
# predict valid.hat
valid.mat1 = valid[,-c(2,4,11)]
valid.mat1[,1] = 1
valid.mat1 = as.matrix(valid.mat1)
valid.hat1 = as.vector(coef.stepwise1%*%t(valid.mat1))
e1 = valid$평균매매가 - valid.hat1
n = nrow(valid)
p1 = 12
x11()
plot(valid.hat1~valid$평균매매가)
# MSE 구하기
sum(e1^2)/(n-p1-1)
# 기존 1220.949에서 1217.055로 감소
# adjusted R2 구하기
SSE.valid1 = sum(e1^2)
SST.valid1 = sum((valid$평균매매가-mean(valid$평균매매가))^2)
SSE.valid1
SST.valid1
ad.R2.valid1 = 1-((SSE.valid1/(n-p1-1))/(SST.valid1/(n-1)))
ad.R2.valid1 # 0.7888323으로 기존보다 증가
sqrt(vif(reg.train.stepwise1))>sqrt(10)
# X11과 X12 공선성 존재
## 2. X11 제거 후 variable selection 진행
reg.train2 = lm(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X12+X13+factor(X14)+X15,data=train)
summary(reg.train2)
vif(reg.train2)>10
# validation set 을 통한 검증
coef2 = reg.train2$coefficients
valid.mat2 = valid[,-12]
valid.mat2[,1] = 1
valid.mat2 = as.matrix(valid.mat2)
View(valid.mat)
# predict valid.hat
valid.hat2 = as.vector(coef2%*%t(valid.mat2))
e2 = valid$평균매매가 - valid.hat2
n = nrow(valid)
p2 = 14
# MSE
sum(e2^2)/(n-p2-1)
# 1347.754로 1220.949보다 높다
# 잔차 분석
x11()
plot(reg.train2)
x11()
plot(resid(reg.train2))
x11()
plot(resid(reg.train2)~fitted(reg.train2))
durbinWatsonTest(reg.train2)
# variable selection 진행
reg.train1 = lm(Y~1,data=train)
# stepwise selection
step(reg.train1, scope = list(upper = reg.train2,lower = reg.train1),direction = 'both')
# Y ~ X6 + X4 + X13 + X10 + factor(X14) + X5 + X9 + X7 + x1 + X15 + X2 + X3
# 빠진 변수 : X8, X12
reg.train.stepwise2 = lm(Y ~ X1+X2+X3+X4+X5+X6+X7+X9+X10+X13+factor(X14)+X15,data=train)
coef.stepwise2 = reg.train.stepwise2$coefficients
summary(reg.train.stepwise2)
vif(reg.train.stepwise2)>10
# forward
step(reg.train1, scope = list(upper = reg.train2,lower = reg.train1),direction = 'forward')
# mse 비교
valid.mat2_2 = valid[,-c(9,12,13)]
valid.mat2_2[,1] = 1
valid.mat2_2 = as.matrix(valid.mat2_2)
# predict valid.hat
valid.hat2_2 = as.vector(coef.stepwise2%*%t(valid.mat2_2))
e2_2 = valid$평균매매가 - valid.hat2_2
n = nrow(valid)
p2_2 = 12
# MSE
sum(e2_2^2)/(n-p2_2-1)
# 1348.721
## 3. X12 제거 후 variable selection 진행
reg.train3 = lm(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X13+factor(X14)+X15,data=train)
summary(reg.train3)
vif(reg.train3)>10
# validation set 을 통한 검증
coef3 = reg.train3$coefficients
valid.mat3 = valid[,-13]
valid.mat3[,1] = 1
valid.mat3 = as.matrix(valid.mat3)
# predict valid.hat
valid.hat3 = as.vector(coef3%*%t(valid.mat3))
e3 = valid$평균매매가 - valid.hat3
n = nrow(valid)
p3 = 14
# MSE
sum(e3^2)/(n-p3-1)
# 1328.958로 X11 제거시(1347.754)보다 낮고, origin(1220.949)보다는 높다
# 잔차 분석
x11()
plot(reg.train3)
x11()
plot(resid(reg.train3))
x11()
plot(resid(reg.train3)~fitted(reg.train3))
durbinWatsonTest(reg.train3)
# variable selection 진행
reg.train1 = lm(Y~1,data=train)
# stepwise selection
step(reg.train1, scope = list(upper = reg.train3,lower = reg.train1),direction = 'both')
# Y ~ X6 + X4 + X13 + X10 + factor(X14) + X5 + X9 + X11 + x7 + X15 + X1 + X2
# 빠진 변수 : X3, X8
reg.train.stepwise3 = lm(Y ~ X1+X2+X4+X5+X6+X7+X9+X10+X11+X13+factor(X14)+X15,data=train)
coef.stepwise3 = reg.train.stepwise3$coefficients
summary(reg.train.stepwise3)
vif(reg.train.stepwise3)>10
# mse 비교
valid.mat3_1 = valid[,-c(4,9,13)]
valid.mat3_1[,1] = 1
valid.mat3_1 = as.matrix(valid.mat3_1)
# predict valid.hat
valid.hat3_1 = as.vector(coef.stepwise3%*%t(valid.mat3_1))
e3_1 = valid$평균매매가 - valid.hat3_1
n = nrow(valid)
p3_1 = 12
# MSE
sum(e3_1^2)/(n-p3_1-1)
# 1348.721
# 1334.331로 X11제거후 variable selection(1348.721)보다 낮지만, orign varable selection(1217.055)보다는 높다
# stepwise, X12(평균 세대수)를 뺀 회귀모형 적용
### Regression Model ###
# library
library(moments)
library(nortest)
### Regression Model ###
# library
install.packages("car")
install.packages("car")
install.packages("CHAID")
?version
R.version
install.packages("CHAID")
(22-15.5)^2/15.5+(3-9.47)^2/9.47
(7-11.8)^2/11.8+(12-7.19)^2/7.19
(12-13.6)^2 + (10-8.33)^2/8.33
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_DEMA\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 전체 지가변동률',sep=''),
ylab = paste('인천광역시',' 인구수',sep=''),xlab = '201601 ~ 201812')
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_DEMA\\Project_apartment\\하나영\\혼인건수')
## Load csv file
dat = read.csv('Marriage.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 기초정보
dim(dat)
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
### 인천광역시 지가변동률  EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_DEMA\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[2:13,2:38])
incheon_sum = apply(gu_dat, 1,sum)
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[1:13,2:38])
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[3:13,2:38])
incheon_sum = apply(gu_dat, 1,sum)
## 기초정보
dim(dat)
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_DEMA\\Project_apartment\\하나영\\혼인건수')
## Load csv file
dat = read.csv('Marriage.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[3:12,2:37])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[2:12,2:37])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat
incheon_sum = apply(gu_dat, 1,sum)
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[1:12,2:37])
#incheon_sum = apply(gu_dat, 1,sum)
#gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[1:12,2:37])
#incheon_sum = apply(gu_dat, 1,sum)
#gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
#incheon_sum = apply(gu_dat, 1,sum)
#gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
ts_gu_mat
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[2:37,2:12])
#incheon_sum = apply(gu_dat, 1,sum)
#gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
gu_dat
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[2:12,2:37])
gu_dat
#incheon_sum = apply(gu_dat, 1,sum)
#gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016), frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 전체 지가변동률',sep=''),
ylab = paste('인천광역시',' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 전체 지가변동률',sep=''),
ylab = paste('인천광역시',' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_DEMA\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 전체 지가변동률',sep=''),
ylab = paste('인천광역시',' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
graphics.off()
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 전체 지가변동률',sep=''),
ylab = paste('인천광역시',' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
### 인천광역시 지가변동률  EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_DEMA\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 구군별 시계열 그래프 개별로 보기
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
windows()
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 전체 지가변동률',sep=''),
ylab = paste('인천광역시',' 지가변동 ',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))

#2(4) #prior_eta
par(mfrow=c(1,2))
pr.theta=rbeta(10000,a,b)
pr.eta=log(pr.theta/(1-pr.theta))
hist(pr.eta,prob=T)
lines(density(pr.eta))
abline(v=mean(pr.eta),lty=2)
#post_eta
theta=rbeta(10000,a+x,b+n-x)
eta=log(theta/(1-theta))
hist(eta,prob=T)
lines(density(eta))
abline(v=mean(eta),lty=2)
mean(pr.eta)
mean(eta)
#2(4) #prior_eta
par(mfrow=c(1,2))
pr.theta=rbeta(10000,a,b)
hist(pr.eta,prob=T)
pr.eta=log(pr.theta/(1-pr.theta))
lines(density(pr.eta))
abline(v=mean(pr.eta),lty=2)
lines(density(eta),col="red")
#2(4) #prior_eta
par(mfrow=c(1,1))
pr.theta=rbeta(10000,a,b)
pr.eta=log(pr.theta/(1-pr.theta))
hist(pr.eta,prob=T)
lines(density(pr.eta))
abline(v=mean(pr.eta),lty=2)
lines(density(eta),col="red")
abline(v=mean(eta),lty=2,col="red")
#2(4) #prior_eta
par(mfrow=c(1,1))
#post_eta
theta=rbeta(10000,a+x,b+n-x)
eta=log(theta/(1-theta))
hist(eta,prob=T)
lines(density(pr.eta))
abline(v=mean(pr.eta),lty=2)
lines(density(eta),col="red")
abline(v=mean(eta),lty=2,col="red")
mean(pr.eta
mean(eta)
abline(v=mean(eta),lty=2,col="red")
ean(eta)
mean(pr.eta)
mean(eta)
#2(4) #prior_eta
par(mfrow=c(1,1))
pr.theta=rbeta(10000,a,b)
pr.eta=log(pr.theta/(1-pr.theta))
#post_eta
theta=rbeta(10000,a+x,b+n-x)
eta=log(theta/(1-theta))
hist(eta,prob=T)
abline(v=mean(pr.eta),lty=2)
lines(density(pr.eta))
lines(density(eta),col="red")
abline(v=mean(eta),lty=2,col="red")
mean(eta)
mean(pr.eta
)
hist(pr.eta,prob=T)
lines(density(pr.eta))
abline(v=mean(pr.eta),lty=2)
#post_eta
theta=rbeta(10000,a+x,b+n-x)
eta=log(theta/(1-theta))
hist(eta,prob=T)
lines(density(pr.eta))
abline(v=mean(pr.eta),lty=2)
abline(v=mean(eta),lty=2,col="red")
lines(density(eta),col="red")
qbeta(c(0.025,0.975),a+x, b+n-x)
prob=theta/sum(theta)
HPD=HPDgrid(prob,0.95)
theta=seq(0,1,length=1000)
theta = rbeta(2000,a+x,b+n-x)
prob=theta/sum(theta)
HPD=HPDgrid(prob,0.95)
HPD.grid=c(min(theta))
HPD.grid=c(min(theta[HPD$index]),max(theta[HPD$index]))
HPD.grid
HPD=HPDgrid(prob,0.95)
?HPDgrid
install.packages(HPD)
install.packages(HPDgrid)
#6
a=b=1
n1=20; x1=10; n2=20; x1=14
theta1=rbeta(10000,a+x1,b+n1-x1)
theta2=rbeta(10000,a+x2,b+n2-x2)
eta=log(theta1/theta2)
xi=log((theta1/(1-theta1))/(theta2/(1-theta2)))
par(mfrow=c(1,2))
HPD=HPDsample(eta)
?HPD
install.packages("HDInterval")
library("HDinterval")
install.packages("HDInterval")
library("HDinterval")
library("HDInterval")
HPD=HPDsample(eta)
HPD=HPDsample(eta)
library("BayesTwin")
install.packages("BayesTwin")
library("BayesTwin")
HPD=HPDsample(eta)
library("BayesTwin")
HPD=HPDsample(eta)
#2(1)
# theta~Beta(a,b)
a=11/25; b=44/25
# x|theta - B(n.theta)
n=10; x=2
# a discretization pf the possible theta values
theta = seq(0,1,length=50)
prior.theta = dbeta(theta,a,b)
#prob of data\theta(likelihood)
likhd.theta = dbinom(x,n,theta)
#joint prob of data $ theta
joint.xtheta = prior.theta*likhd.theta
#posterior of theta
post.theta = dbeta(theta, a+x, b+n-x)
#2(2)
par(mfrow=c(2,2))
plot(theta, prior.theta, type="l", sub="(a) prior:pi(theta)")
plot(theta, likhd.theta, type="l",sub="(b) likelihood : f(x|theta)")
abline(v=x/n,lty=2)
plot(theta, joint.xtheta, type="l", sub="(c) prior x likelihood : pi (theta)x f(x|theta)")
abline(v=(a+x-1)/(a+b+n-2), lty=2)
plot(theta, post.theta, type="l", sub="(d) poeterior : pi(theta|x)")
abline(v=(a+x-1)/ (a+b+n-2), lty=2)
par(mfrow=c(1,1))
plot(theta,dbeta(theta,a+x, b+n-x),type="l")
#2(2)
par(mfrow=c(2,2))
plot(theta, prior.theta, type="l", sub="(a) prior:pi(theta)")
plot(theta, likhd.theta, type="l",sub="(b) likelihood : f(x|theta)")
abline(v=x/n,lty=2)
plot(theta, joint.xtheta, type="l", sub="(c) prior x likelihood : pi (theta)x f(x|theta)")
abline(v=(a+x-1)/(a+b+n-2), lty=2)
abline(v=(a+x-1)/ (a+b+n-2), lty=2)
par(mfrow=c(1,1))
plot(theta, post.theta, type="l", sub="(d) poeterior : pi(theta|x)")
#2(2)
par(mfrow=c(2,2))
plot(theta, prior.theta, type="l", sub="(a) prior:pi(theta)")
plot(theta, likhd.theta, type="l",sub="(b) likelihood : f(x|theta)")
plot(theta, joint.xtheta, type="l", sub="(c) prior x likelihood : pi (theta)x f(x|theta)")
abline(v=(a+x-1)/(a+b+n-2), lty=2)
abline(v=x/n,lty=2)
plot(theta, post.theta, type="l", sub="(d) poeterior : pi(theta|x)")
abline(v=(a+x-1)/ (a+b+n-2), lty=2)
par(mfrow=c(1,1))
plot(theta,dbeta(theta,a+x, b+n-x),type="l")
#2(3)theta random sample
theta = rbeta(2000,a+x,b+n-x)
hist(theta, prob=T)
lines(density(theta))
mean.theta=mean(theta)
abline(v=mean.theta, lty=2)
quantile(theta,c(0.025, 0.975))
qbeta(c(0.025,0.975),a+x, b+n-x)
plot(theta,dbeta(theta,a+x, b+n-x),type="l")
#2(3)theta random sample
theta = rbeta(2000,a+x,b+n-x)
hist(theta, prob=T)
lines(density(theta))
mean.theta=mean(theta)
abline(v=mean.theta, lty=2)
quantile(theta,c(0.025, 0.975))
qbeta(c(0.025,0.975),a+x, b+n-x)
#2(4) #prior_eta
par(mfrow=c(1,1))
pr.theta=rbeta(10000,a,b)
pr.eta=log(pr.theta/(1-pr.theta))
hist(pr.eta,prob=T)
#post_eta
theta=rbeta(10000,a+x,b+n-x)
eta=log(theta/(1-theta))
hist(eta,prob=T)
lines(density(pr.eta))
abline(v=mean(pr.eta),lty=2)
lines(density(eta),col="red")
abline(v=mean(eta),lty=2,col="red")
theta=seq(0,1,length=1000)
theta = rbeta(2000,a+x,b+n-x)
prob=theta/sum(theta)
HPD=HPDgrid(prob,0.95)
qbeta(c(0.025,0.975),a+x, b+n-x)
a=b=1
n1=18 ;x1=12; n2=10; x2=8
theta1=rbeta(10000,a+x1,b+n1-x1)
theta2=rbeta(10000,a+x2,b+n2-x2)
eta=log(theta1/theta2)
xi=log((theta1/(1-theta1))/(theta2/(1-theta2)))
par(mfrow=c(1,2))
plot(density(eta),type="l",xlab="로그비",ylab="posterior density",main="")
HPD=HPDsample(eta)
abline(v=HPD,lty=2)
a=b=1
n1=18 ;x1=12; n2=10; x2=8
theta1=rbeta(10000,a+x1,b+n1-x1)
theta2=rbeta(10000,a+x2,b+n2-x2)
eta=log(theta1/theta2)
xi=log((theta1/(1-theta1))/(theta2/(1-theta2)))
HPDsmaple=function(theta,level=0.95) {
N=length(theta)
theta.sort=sort(theta)
M=ceiling(N*level)
nCI=N-M
CI.width=rep(0,nCI)
for(i in 1:nCI)CI.width[i]=theta.sort[i+M]-theta.sort[i]
index=which.min(CI.width)
HPD=c(theta.sort[index],theta.sort[index+M])
return(HPD)
}
par(mfrow=c(1,2))
HPD=HPDsample(xi)
text(mean(xi),0.06,"95% HPD interval")
abline(v=HPD,lty=2)
plot(density(xi),type="l",xlab="로그오즈비",ylab="posterior density",main="")
HPD=HPDsample(eta)
text(mean(eta),0.3,"95% HPD interval")
plot(density(eta),type="l",xlab="로그비",ylab="posterior density",main="")
abline(v=HPD,lty=2)
text(mean(xi),0.06,"95% HPD interval")
mean(eta)
plot(density(eta),type="l",xlab="로그비",ylab="posterior density",main="")
abline(v=HPD,lty=2)
text(mean(eta),0.3,"95% HPD interval")
text(mean(eta),0.73,"95% HPD interval")
text(mean(eta),0.9,"95% HPD interval")
text(mean(eta),0.3,"95% HPD interval")
HPD=HPDsample(xi)
plot(density(xi),type="l",xlab="로그오즈비",ylab="posterior density",main="")
text(mean(xi),0.06,"95% HPD interval")
### 인천광역시 월별 구별 인구수(new) EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:\Users\user\Desktop\Project_apartment\하나영\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## set working directory
setwd('C:\\Users\user\\Desktop\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
View(dat)
## 열명 수정
colnames(dat) = gsub('X','',colnames(dat))
colnames(dat)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$구.이름)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$구.이름==gu_name[i] & dat$행정구역=="합계")
}
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 기초정보
dim(dat)
gu_sumrow
dat[gu_sumrow,3:38]
gu_name
### 인천광역시 월별 구별 인구수(new) EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
View(dat)
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
gu_dat
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
gu_dat
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
ts_gu_mat
min(ts_gu_mat);max(ts_gu_mat[,1:10])
min(ts_gu_mat)
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 구군별 시계열 그래프 개별로 보기
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
windows()
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
## 구군별 시계열 그래프 개별로 보기
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
windows()
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 인천광역시 전체 인구수 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 인구수 변화',sep=''),
ylab = paste('인천광역시',' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
graphics.off()
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 인구수 변화',sep=''),
ylab = paste('인천광역시',' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
## 인천광역시 동별 시계열 그래프
## 구군별로 읍면동 시계열 데이터 매트릭스 생성하는 함수
dong_list = function(Gu_name){
dong_row = which(dat$구.이름==Gu_name)
dong_dat = t(dat[dong_row,3:38])
ts_dong_mat = ts(data = dong_dat,start = c(2016),frequency = 36)
return(ts_dong_mat)
}
gu_name
for (i in 1:length(gu_name)){
a = dong_list(gu_name[i])
dong_name = dat[dat$구.이름==gu_name[i],2]
windows()
par(mfrow=c(3,ceiling(ncol(a)/3)))  # 그래프 구역 갯수 설정을 위한 숫자
for(j in 1:ncol(a)){
dates = seq(as.Date("2016-01-01"), by = "month", along = a[,j]) # 날짜 201601~201812 생
tsp = attributes(a[,j])$tsp
plot(a[,j],xaxt = "n",main = paste(gu_name[i],' ',dong_name[j],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' ',dong_name[j],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = a[,j]), labels = format(dates,"%Y%m"))
}
}
graphics.off()
dong_row = which(dat$시군구==Gu_name)
## 인천광역시 동별 시계열 그래프
## 구군별로 읍면동 시계열 데이터 매트릭스 생성하는 함수
dong_list = function(Gu_name){
dong_row = which(dat$시군구==Gu_name)
dong_dat = t(dat[dong_row,3:38])
ts_dong_mat = ts(data = dong_dat,start = c(2016),frequency = 36)
return(ts_dong_mat)
}
for (i in 1:length(gu_name)){
a = dong_list(gu_name[i])
dong_name = dat[dat$시군구==gu_name[i],2]
windows()
par(mfrow=c(3,ceiling(ncol(a)/3)))  # 그래프 구역 갯수 설정을 위한 숫자
for(j in 1:ncol(a)){
dates = seq(as.Date("2016-01-01"), by = "month", along = a[,j]) # 날짜 201601~201812 생
tsp = attributes(a[,j])$tsp
plot(a[,j],xaxt = "n",main = paste(gu_name[i],' ',dong_name[j],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' ',dong_name[j],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = a[,j]), labels = format(dates,"%Y%m"))
}
}
for (i in 1:length(gu_name)){
a = dong_list(gu_name[i])
dong_name = dat[dat$시군구==gu_name[i],2]
windows()
par(mfrow=c(3,ceiling(ncol(a)/3)))  # 그래프 구역 갯수 설정을 위한 숫자
for(j in 1:ncol(a)){
dates = seq(as.Date("2016-01-01"), by = "month", along = a[,j]) # 날짜 201601~201812 생
tsp = attributes(a[,j])$tsp
plot(a[,j],xaxt = "n",main = paste(gu_name[i],' ',dong_name[j],' 지가변동률 ',sep=''),
ylab = paste(gu_name[i],' ',dong_name[j],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = a[,j]), labels = format(dates,"%Y%m"))
}
}
### 기준금리 ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_apartment\\하나영\\기준금리')
## Load csv file
dat = read.csv('기준금리.csv',header=T,stringsAsFactors=F)
View(dat)
### 인천광역시 월별 구별 인구수(new) EDA ###
## 시계열 자료
rm(list=ls())
## set working directory
setwd('C:\\Users\\user\\Desktop\\Project_apartment\\하나영\\지가변동률')
## Load csv file
dat = read.csv('지가변동률데이터.csv',header=T,stringsAsFactors=F)
View(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
## 기초정보
dim(dat)
gu_sumrow
gu_name
## 기초정보
dim(dat)
## 각 구별 월별로 인구 수 변화
# 구군 이름
gu_name = unique(dat$시군구)
gu_name
## 각 구별 합계 행 위치 찾기
gu_sumrow = c()
for (i in 1:length(gu_name)){
gu_sumrow[i] = which(dat$시군구==gu_name[i] & dat$행정구역=="합계")
}
gu_sumrow
## 구군별 합계 시계열 데이터 매트릭스
# data에 transpose 하는 이유는 plot 에서 행 벡터 인식 X 열 벡터 인식 O
gu_dat = t(dat[gu_sumrow,3:38])
incheon_sum = apply(gu_dat, 1,sum)
gu_dat = cbind(gu_dat,incheon_sum)
ts_gu_mat = ts(data = gu_dat,start = c(2016),frequency = 36)
min(ts_gu_mat);max(ts_gu_mat[,1:10])
## 구군별 시계열 그래프 하나의 창으로 모아보기
windows()
par(mfrow=c(2,5))
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 구군별 시계열 그래프 개별로 보기
for(i in 1:length(gu_name)){
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,i]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,i])$tsp
windows()
plot(ts_gu_mat[,i],xaxt = "n",main = paste(gu_name[i],' 인구수 변화',sep=''),
ylab = paste(gu_name[i],' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,i]), labels = format(dates,"%Y%m"))
}
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 인구수 변화',sep=''),
ylab = paste('인천광역시',' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
## 인천광역시 전체 지가변동률 그래프
dates = seq(as.Date("2016-01-01"), by = "month", along = ts_gu_mat[,11]) # 날짜 201601~201812 생
tsp = attributes(ts_gu_mat[,11])$tsp
windows()
plot(ts_gu_mat[,11],xaxt = "n",main = paste('인천광역시',' 전체 지가변동률',sep=''),
ylab = paste('인천광역시',' 인구수',sep=''),xlab = '201601 ~ 201812')
axis(1, at = seq(tsp[1], tsp[2], along = ts_gu_mat[,11]), labels = format(dates,"%Y%m"))
